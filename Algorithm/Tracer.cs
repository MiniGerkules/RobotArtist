using System;
using System.Linq;
using System.Windows;
using System.Collections.Generic;
using System.Windows.Media.Imaging;

using GeneralComponents;
using GeneralComponents.PLT;
using GeneralComponents.Colors;
using System.IO;
using System.Security.Policy;
using System.Globalization;

namespace Algorithm {
    public class Tracer {
        public StrokeBrush strokeBrush { get; private set; }
        public int MaxAmountOfIters { get; private set; }
        public BitmapImage Image { get; private set; }
        public Settings settings { get; private set; }
        public Matrix2D ColorClass { get; private set; } // #canvasgraymix first layer
        public Matrix2D VolumeOfWhite { get; private set; } // #canvasgraymix second layer
        public Matrix3D ColoredCanvas { get; private set; } // #canvas // array m x n x 3 of canvasColor
        public Matrix3D InitialImage { get; private set; } // #img // array m x n x 3 where m x n x 0 is a red layer, m x n x 1 is a green layer, m x n x 2 is a blue layer, ignore layer alpha
        public Matrix2D Error { get; private set; } // #err
        public Matrix3D UnblurredImage { get; private set; } // #img_unblurred
        public Matrix2D GrayInitialImage { get; private set; } // #imggray
        public List<List<List<double>>> Ycell { get; private set; }
        public List<List<List<double>>> Wcell { get; private set; }

        public Gradient Gradients; // stores Gradients (pairs U and V for every pixel) for all picture

        Database database;

        public Tracer(Database database) {
            this.database = database;
            CMYBWColor.Database = database;
            CultureInfo.CurrentCulture = CultureInfo.GetCultureInfo("en-US"); // to have dots instead of commas when printing to file
        }

        public PLTDecoderRes Trace(string fileName, Settings settings) {
            BitmapImage img = new(new Uri(fileName));
            this.settings = settings;

            Image = img;

            strokeBrush = new StrokeBrush(settings.guiTrace.brushWidthMM,
               Math.Min(settings.guiTrace.canvasWidthMM / Image.PixelWidth, // #sfX Image.PixelWidth should be greater than settings.guiTrace.canvasWidthMM
               settings.guiTrace.canvasHeightMM / Image.PixelHeight), settings.maxLenFactor); // #sfY
            MaxAmountOfIters = strokeBrush.thickness; // the max amount of attempts to find a new line section
            //InitialImage = Functions.imageToMatrix3D(Image); // ##NOTok
            InitialImage = new Matrix3D(canvasHeight: (int)settings.guiTrace.canvasHeightMM);
            Ycell = database.GetHSV().Copy();
            Wcell = database.GetProportions().Copy(); 

            ColorClass = new Matrix2D(Image.PixelHeight, Image.PixelWidth); // #canvasgraymix 1 ColorMixType only
            VolumeOfWhite = new Matrix2D(Image.PixelHeight, Image.PixelWidth); // #canvasgraymix 2 
            ColoredCanvas = new Matrix3D(Image.PixelHeight, Image.PixelWidth, layers: 3, initVal: settings.canvasColor); // #canvas
            Error = (ColoredCanvas - InitialImage)[0]; 

            UnblurredImage = InitialImage;

            if (settings.doBlur) {
                Matrix2D H = Functions.fspecial(strokeBrush.smallThickness);
                InitialImage = Functions.conv2(InitialImage, H, "replicate");
            }

            GrayInitialImage = InitialImage.rgb2gray(); // #imggray

            Gradients = new Gradient(GrayInitialImage, strokeBrush.thickness);

            return doIterations();
        }

        private PLTDecoderRes doIterations() {
            int nStrokes = 0; // #nStrokes
            List<Stroke> strokes = new List<Stroke>(); // #strokes
            bool isNewPieceAccepted = false; // #accepted

            int mSize = InitialImage[0].Rows;
            int nSize = InitialImage[0].Columns;
            int kSize = InitialImage.Layers;

            Matrix3D syntheticSmearMap = new Matrix3D(mSize, nSize, kSize); // #canvas2

            for (int kk = 0; kk < settings.amountOfTotalIters; kk++) {
                double overlap = settings.minInitOverlapRatio; // coefficient of overlap of the stroke
                int minLen = strokeBrush.thickness * settings.minLenFactor[kk]; // min length of the stroke - used only on 1 iteration
                if (kk == 2)
                    InitialImage = UnblurredImage;
                if (kk > settings.minInitOverlapRatio)
                    overlap = settings.maxInitOverlapRatio;
                else
                    overlap = settings.minInitOverlapRatio;

                // pvect for 15 x 15:
                //int[] pvect = new int[] { 96, 219, 80, 218, 172, 79, 188, 216, 85, 43, 21, 8, 209, 109, 87, 50, 17, 9, 212, 117, 58, 63, 100, 165, 15, 123, 35, 71, 220, 177, 97, 34, 116, 200, 176, 224, 78, 19, 2, 115, 102, 127, 156, 195, 142, 131, 45, 213, 122, 99, 28, 128, 166, 75, 150, 55, 91, 69, 132, 189, 160, 51, 138, 27, 192, 163, 59, 61, 185, 33, 153, 199, 72, 92, 107, 135, 168, 139, 144, 89, 49, 31, 24, 14, 39, 106, 67, 60, 62, 179, 126, 193, 225, 16, 70, 196, 130, 129, 13, 158, 18, 173, 23, 194, 180, 201, 84, 104, 86, 94, 140, 214, 198, 152, 133, 103, 154, 143, 121, 20, 10, 77, 112, 11, 120, 148, 174, 74, 207, 164, 222, 64, 40, 149, 30, 7, 190, 162, 145, 82, 125, 57, 147, 108, 76, 155, 73, 175, 187, 12, 161, 184, 181, 66, 221, 22, 56, 178, 124, 114, 202, 170, 52, 134, 44, 206, 215, 119, 68, 53, 48, 88, 90, 167, 54, 38, 208, 197, 203, 141, 81, 93, 25, 136, 101, 223, 3, 36, 157, 113, 210, 32, 46, 110, 159, 169, 42, 111, 204, 151, 37, 171, 4, 1, 26, 205, 6, 146, 211, 29, 95, 47, 137, 183, 105, 98, 5, 182, 41, 65, 217, 118, 186, 83, 191 };
                // random pvect:
                //int[] pvect = Functions.Randperm(mSize * nSize, mSize * nSize);
                // pvect for 100 x 100:
                int[] pvect = new int[] {};
                // pvect for 10 x 10:
                //int[] pvect = new int[] {
                //    94,  44,  81,  61,  41,  65,  71,  28,  36,  69,
                //    96,  18,  91,  24,  16,  80,  11,  35,  17,  19,
                //    14,  54,  49,  92,  29,  66,  32,  42,  37,  12,
                //    21,  38,  78,  67,  5,   59,  2,   58,  30,  39,
                //    23,  20,  27,  50,  13,  100, 84,  47,  55,  95,
                //    73,  83,  99,  40,  53,  4,   52,  8,   90,  48,
                //    10,  31,  33,  86,  87,  9,   56,  1,   72,  57,
                //    68,  79,  34,  98,  75,  70,  46,  82,  74,  64,
                //    43,  89,  3,   15,  88,  7,   62,  93,  77,  76,
                //    85,  25,  63,  22,  45,  6,   51,  97,  26,  60
                //};

                for (int iCounter = 0; iCounter < mSize; iCounter++) { //# ictr
                    for (int jCounter = 0; jCounter < nSize; jCounter++) { // #jctr

                        int pCounter = (iCounter * nSize + jCounter); // #pctr
                        int pij = pvect[pCounter] - 1;
                        int j = pij % nSize; 
                        int i = (pij - j) / nSize; 

                        if ((Error[i, j] > settings.pixTol) || (syntheticSmearMap[i, j, 0] == 0)) {
                            // if the deviation in pixel is large
                            int prevX = i; // #pX
                            int prevY = j; // #pY

                            //meancol is [r, g, b], col is the same but in shape of 3d array like (0,0,k) element

                            // find average color of the circle area with radius equals to brush radius
                            double[] meanColorPixel = Functions.getMeanColor( // #col? #meancol
                                InitialImage, prevX, prevY, strokeBrush.smallThickness, 
                                strokeBrush.bsQuad, mSize, nSize);

                            double[] hsvMeanColorPixel = new double[meanColorPixel.Length];

                            for (int m = 0; m < meanColorPixel.Length; m++)
                                hsvMeanColorPixel[m] = meanColorPixel[m] / 255;

                            hsvMeanColorPixel = Functions.rgb2hsv(hsvMeanColorPixel);

                            List<double[]> hsvMeanColorPixelList = new List<double[]> { hsvMeanColorPixel };

                            List<double[]> proportionsList;
                            List<double[]> hsvNewColor;
                            List<ColorMixType> mixTypesList;

                            // define proportions and type of the mixture in this area
                            Functions.PredictProportions(out proportionsList, out mixTypesList, out hsvNewColor, 
                                hsvMeanColorPixelList, database.GetHSV().Copy(), database.GetProportions().Copy(), Ycell.Count); // ##ok
                            hsvMeanColorPixel = hsvMeanColorPixelList[0];
                            double[] proportions = proportionsList[0];
                            ColorMixType mixTypes = mixTypesList[0];
                            // proportions of paints in real values
                            double[] col8paints = Functions.proportions2pp(proportions, mixTypes);
                            // the volume of white in the paint mixture for sorting smears by overlap
                            double volumeOfWhite = col8paints[4];

                            var col2 = Functions.hsv2rgb(hsvNewColor[0]);

                            // draw a synthetic map of smears with colour
                            // that fits the type of mixture

                            //double[] col2 = new double[3];
                            //var rand = new Random();
                            //rand.NextDouble();

                            //switch(mixTypes)
                            //{
                            //    case ColorMixType.MagentaYellow1:
                            //        col2 = new double[] {0.5 + 0.5 * rand.NextDouble(), 0.5 * rand.NextDouble(), 0.5 * rand.NextDouble() };
                            //        break;
                            //    case ColorMixType.MagentaYellow2:
                            //        col2 = new double[] { 0.5 + 0.5 * rand.NextDouble(), 0.5 + 0.5 * rand.NextDouble(), 0.5 * rand.NextDouble() };
                            //        break;
                            //    case ColorMixType.YellowCyan:
                            //        col2 = new double[] { 0.5 * rand.NextDouble(), 0.5 + 0.5 * rand.NextDouble(), 0.5 * rand.NextDouble() };
                            //        break;
                            //    case ColorMixType.CyanMagenta:
                            //        col2 = new double[] { 0, 0, 0.5 * rand.NextDouble() + 0.5 * rand.NextDouble() };
                            //        break;
                            //}

                            int nPoints = 1; // amount of points in the stroke #nPts
                            bool isStrokeEnded = false; // #endedStroke 

                            // copy canvases - to backup if the stroke is too short
                            Matrix3D canvasCopy = new Matrix3D(ColoredCanvas); // #canvas_copy
                            Matrix2D canvasgraymixCopyColorClass = new Matrix2D(ColorClass); // #canvasgraymix_copy first layer
                            Matrix2D canvasgraymixCopyVolumeOfWhite = new Matrix2D(VolumeOfWhite); // #canvasgraymix_copy first layer
                            Matrix3D canvas2Copy = new Matrix3D(syntheticSmearMap); // #canvas2_copy

                            Stroke stroke = new Stroke(new System.Windows.Point(prevX, prevY), meanColorPixel, col8paints, proportions, mixTypes);
                            // one stroke consists of several strokes of the same type but other directions

                            while (!isStrokeEnded)
                            {
                                // %find new direction
                                int counter = 1; // #ctr index
                                StrokeCandidate candidate = new StrokeCandidate(-1, -1, Double.MaxValue);
                                while (counter < MaxAmountOfIters)
                                {
                                    double cosA = 0, sinA = 0;
                                    Functions.getDirection(new Point(prevX, prevY), 
                                        stroke, Gradients, settings.goNormal, out cosA, out sinA);
                                    
                                    int r = MaxAmountOfIters - counter;

                                    candidate.x = prevX + Math.Round(r * cosA); // %new X
                                    candidate.y = prevY + Math.Round(r * sinA); // %new Y 

                                    // test new fragment of the stroke
                                    isNewPieceAccepted = Functions.testNewPieceAccepted( // #accepted
                                        startPoint: new Point(prevX, prevY),
                                        img: InitialImage,
                                        canvasColor: settings.canvasColor,
                                        canvasEps: settings.canvasColorFault,
                                        canvas2: syntheticSmearMap,
                                        ColorClass: ColorClass,
                                        VolumeOfWhite: VolumeOfWhite,
                                        pixTol: settings.pixTol,
                                        pixTolAverage: settings.pixTolAverage,
                                        meanColorPixel: meanColorPixel,
                                        mSize: mSize,
                                        nSize: nSize,
                                        overlap: overlap,
                                        bs2: strokeBrush.smallThickness,
                                        bsQuad: strokeBrush.bsQuad,
                                        mixTypes: mixTypes,
                                        volumeOfWhite: volumeOfWhite,
                                        ref candidate
                                    );

                                    if (isNewPieceAccepted) //%if error is small, accept the stroke immediately
                                        counter = MaxAmountOfIters;
                                    
                                    counter++;
                                }
                                // %draw the stroke fragment

                                if (isNewPieceAccepted)
                                {
                                    Matrix3D coloredCanvas = ColoredCanvas;
                                    Matrix2D colorClass = ColorClass;
                                    Matrix2D volOfWhite = VolumeOfWhite;

                                    Error = Functions.drawPiece(
                                            startPoint: new Point(prevX, prevY),
                                            candidate: candidate,
                                            bs2: strokeBrush.smallThickness,
                                            bsQuad: strokeBrush.bsQuad,
                                            canvas: ref coloredCanvas,
                                            canvas2: ref syntheticSmearMap,
                                            ColorClass: ref colorClass,
                                            VolumeOfWhite: ref volOfWhite,
                                            meanColorPixel: meanColorPixel,
                                            col2: col2,
                                            imggray: GrayInitialImage,
                                            mSize: mSize,
                                            nSize: nSize,
                                            mixTypes: mixTypes,
                                            volumeOfWhite: volumeOfWhite
                                        );

                                    // % determine new length
                                    var dlen = Math.Sqrt((prevX - candidate.x) * (prevX - candidate.x) + (prevY - candidate.y) * (prevY - candidate.y));
                                    stroke.length = stroke.length + dlen;

                                    // %if length is too large
                                    int maxLen = strokeBrush.thickness * settings.maxLenFactor; // #maxLen - max length of the stroke
                                    if (stroke.length >= maxLen)
                                        isStrokeEnded = true;

                                    double vX = candidate.x;
                                    double vY = candidate.y;
                                    prevX = (int)candidate.x;
                                    prevY = (int)candidate.y;

                                    stroke.points.Add(new Point(vX, vY));
                                    nPoints++;
                                }
                                else
                                    isStrokeEnded = true;
                            }
                            if (nPoints > 1) // ##ok
                            { 
                                if (stroke.length < minLen)
                                {
                                    // if the stroke is too short, and the iteration number
                                    // is for long non-overlapping strokes
                                    // backup canvases
                                    ColoredCanvas = new Matrix3D(canvasCopy); // #canvas_copy
                                    ColorClass = new Matrix2D(canvasgraymixCopyColorClass); // #canvasgraymix_copy first layer
                                    VolumeOfWhite = new Matrix2D(canvasgraymixCopyVolumeOfWhite); // #canvasgraymix_copy first layer
                                    syntheticSmearMap = new Matrix3D(canvas2Copy); // #canvas2_copy
                                }
                                else
                                {
                                    // if the stroke is appropriate
                                    nStrokes++;
                                    strokes.Add(stroke);
                                }
                            }
                        }
                    }
                    // %after each row iteration, show canvas
                    // #? show #canvas and #canvas2
                }
                // #? draw somwthing
            }
            // %%%%%%%%%%%%%%%%%%%
            // % create array for each mix type
            int amountOfMixGroups = Ycell.Count; // #nmixgroups
            List<List<double[]>> proportionsByMixGroups = new List<List<double[]>>(amountOfMixGroups); // #mixCell // % [props, cls]
            List<List<double[]>> colorByMixGroups = new List<List<double[]>>(amountOfMixGroups); // #colCell
            List<List<int>> mixGroupsId = new List<List<int>>(amountOfMixGroups); // #idcell

            for (int i = 0; i < amountOfMixGroups; i++)
            {
                proportionsByMixGroups.Add(new List<double[]>());
                colorByMixGroups.Add(new List<double[]>());
                mixGroupsId.Add(new List<int>());
            }

            for (int i = 0; i < nStrokes; i++)
            {
                ColorMixType currentMixType = strokes[i].mixType;
                proportionsByMixGroups[(int)currentMixType].Add(strokes[i].proportions); // % proportions array
                colorByMixGroups[(int)currentMixType].Add(strokes[i].color); // % color array
                mixGroupsId[(int)currentMixType].Add(i); // %real order of stroke in cell array
            }
            // %now, rescale K for each mix group and perform internal k-means among
            // % proportions
            uint amountOfColors = 0; // #nColors2
            List<int> globalIndexes = new List<int>(); // #ids
            List<ColorMixType> colorMixTypes = new List<ColorMixType>(); // #cls
            List<double[]> mix8colorsValues = new List<double[]>(); // #mixvalues // %arrange col8 // double[8] - color
            List<double[]> finalColors = new List<double[]>(); // #colorsFinal // %arrange RGB colors // double[3] - color
            List<double[]> proportionValues = new List<double[]>(); // #propvalues // %arrange proportions // double[3] - proportions
            List<int> indexesToIndexes = new List<int>(); // #i2i
            int clustersCounter = 0; // #ctr

            // %cluster colors by mixture characteristics

            uint nColors = settings.guiTrace.colorsAmount;
            for (int i = 0; i < amountOfMixGroups; i++)
            {
                indexesToIndexes.AddRange(mixGroupsId[i]);
                uint Ncl = (uint)proportionsByMixGroups[i].Count;
                List<double[]> colArray = colorByMixGroups[i];

                if (Ncl > 0)
                {
                    uint Ki = (uint)Math.Ceiling((Ncl / (double)nStrokes ) * nColors); // % number of clusters for a given type of mixture, proportional to the number of strokes
                    List<int> indexes = new List<int>(); // #idsk
                    if (Ki >= Ncl)
                    {
                        Ki = Ncl;
                        for (int j = 0; j < Ncl; j++)
                            indexes.Add(j);
                    }
                    else
                    {
                        //indexes = Functions.kmeans(colArray, Ki);
                        if (i == 0)
                            indexes = new List<int>() { 56, 56, 54, 11, 15, 71, 71, 0, 69, 69, 3, 82, 39, 7, 24, 14, 28, 74, 28, 61, 56, 0, 56, 28, 77, 11, 11, 4, 61, 0, 16, 56, 51, 56, 29, 25, 60, 56, 16, 71, 79, 74, 3, 44, 51, 77, 61, 56, 56, 54, 8, 61, 23, 56, 23, 30, 56, 7, 11, 56, 54, 20, 64, 61, 74, 62, 56, 35, 74, 72, 24, 44, 23, 54, 72, 11, 27, 68, 16, 11, 11, 39, 36, 7, 69, 76, 15, 61, 69, 7, 23, 69, 44, 14, 49, 71, 61, 79, 8, 51, 62, 80, 5, 24, 24, 37, 44, 28, 72, 14, 24, 61, 54, 30, 24, 24, 4, 0, 52, 56, 40, 23, 53, 56, 48, 51, 72, 44, 76, 19, 44, 28, 51, 38, 60, 3, 17, 9, 78, 28, 57, 7, 53, 49, 80, 61, 45, 44, 19, 60, 13, 24, 68, 28, 28, 16, 38, 16, 11, 50, 52, 74, 47, 8, 64, 50, 59, 79, 82, 82, 4, 33, 39, 68, 12, 74, 28, 15, 12, 74, 22, 68, 23, 65, 70, 77, 12, 9, 65, 69, 62, 75, 38, 69, 7, 77, 70, 41, 23, 23, 45, 15, 0, 39, 44, 29, 50, 14, 23, 35, 48, 82, 56, 54, 25, 0, 44, 37, 70, 45, 5, 54, 49, 55, 3, 44, 5, 29, 14, 56, 28, 71, 4, 49, 64, 48, 60, 22, 14, 20, 28, 5, 24, 25, 60, 5, 38, 74, 39, 4, 23, 56, 56, 37, 69, 16, 49, 21, 24, 48, 35, 20, 62, 0, 12, 14, 65, 50, 31, 51, 49, 33, 70, 71, 56, 4, 69, 24, 82, 63, 35, 36, 3, 16, 56, 45, 25, 82, 27, 16, 22, 5, 53, 28, 60, 28, 35, 16, 60, 72, 7, 77, 14, 61, 62, 13, 7, 51, 44, 52, 14, 69, 60, 37, 28, 5, 23, 26, 68, 76, 46, 45, 30, 71, 66, 53, 61, 50, 16, 24, 71, 23, 2, 31, 69, 14, 45, 23, 48, 56, 64, 11, 7, 45, 9, 45, 67, 80, 56, 61, 12, 30, 31, 28, 18, 14, 45, 73, 56, 0, 33, 71, 37, 14, 28, 20, 57, 14, 70, 64, 2, 69, 62, 41, 25, 50, 27, 56, 49, 41, 69, 7, 16, 51, 35, 12, 43, 23, 28, 65, 72, 37, 16, 20, 33, 21, 0, 35, 2, 81, 29, 30, 16, 19, 5, 61, 14, 74, 53, 66, 39, 43, 8, 42, 30, 10, 34, 62, 12, 39, 37, 11, 38, 15, 53, 18, 70, 4, 16, 21, 19, 7, 67, 20, 72, 49, 61, 25, 18, 38, 9, 51, 24, 48, 7, 23, 38, 11, 54, 28, 18, 48, 56, 59, 66, 67, 79, 11, 80, 74, 51, 60, 67, 23, 79, 23, 16, 23, 24, 0, 80, 24, 11, 74, 20, 50, 11, 76, 38, 43, 36, 24, 61, 56, 14, 68, 56, 64, 81, 38, 69, 16, 16, 51, 23, 22, 25, 33, 70, 15, 64, 78, 55, 2, 51, 14, 36, 76, 37, 29, 32, 51, 67, 61, 53, 56, 6, 51, 78, 27, 8, 29, 0, 51, 69, 73, 56, 49, 30, 21, 62, 5, 24, 55, 65, 9, 38, 31, 18, 26, 22, 61, 50, 40, 13, 30, 56, 60, 61, 69, 0, 47, 58, 44, 24, 65, 24, 78, 51, 15, 56, 69, 72, 44, 14, 0, 13, 46, 51, 1, 77, 55, 49, 39, 78, 24, 52, 24, 76, 44, 69, 56, 18, 60, 9, 14, 82, 60, 81, 14, 44, 66, 0, 81, 59, 29, 15, 12, 13, 41 };
                        else if (i == 1)
                            indexes = new List<int>() { 88, 89, 71, 9, 44, 13, 40, 93, 69, 71, 53, 83, 4, 53, 56, 33, 87, 46, 100, 46, 56, 57, 40, 91, 27, 88, 31, 44, 10, 13, 88, 9, 10, 46, 93, 34, 46, 30, 20, 87, 88, 53, 54, 11, 54, 33, 93, 34, 90, 10, 71, 40, 75, 75, 20, 61, 51, 30, 101, 75, 69, 10, 4, 101, 10, 34, 17, 4, 8, 75, 46, 101, 11, 51, 88, 73, 105, 57, 54, 12, 6, 86, 43, 69, 71, 17, 88, 38, 17, 46, 71, 86, 1, 60, 4, 46, 86, 88, 95, 53, 13, 46, 27, 45, 54, 10, 46, 103, 83, 4, 21, 56, 88, 4, 12, 46, 69, 43, 10, 89, 75, 18, 49, 53, 18, 41, 46, 40, 51, 12, 32, 69, 21, 3, 1, 52, 77, 70, 71, 88, 15, 40, 10, 88, 47, 60, 10, 15, 77, 34, 53, 61, 10, 66, 10, 17, 22, 85, 58, 60, 101, 44, 13, 12, 40, 77, 46, 46, 20, 71, 19, 22, 64, 22, 46, 53, 41, 95, 0, 46, 89, 86, 89, 4, 6, 10, 88, 86, 90, 53, 71, 30, 12, 59, 37, 10, 43, 6, 66, 13, 54, 34, 10, 91, 83, 44, 26, 86, 69, 5, 14, 3, 83, 34, 83, 61, 103, 103, 85, 90, 86, 54, 35, 41, 17, 19, 78, 88, 81, 81, 54, 85, 27, 42, 5, 10, 75, 50, 89, 46, 8, 3, 15, 35, 58, 6, 8, 74, 23, 101, 86, 49, 95, 90, 14, 3, 37, 27, 71, 89, 57, 81, 71, 79, 28, 90, 14, 77, 101, 44, 55, 104, 16, 10, 16, 83, 33, 41, 16, 53, 101, 51, 10, 8, 42, 75, 29, 64, 54, 32, 60, 59, 49, 41, 83, 53, 21, 29, 102, 87, 35, 44, 28, 8, 25, 0, 17, 90, 9, 25, 3, 54, 32, 88, 90, 86, 75, 86, 39, 31, 87, 43, 63, 103, 53, 16, 25, 90, 21, 49, 43, 57, 16, 5, 71, 23, 64, 81, 41, 66, 61, 49, 20, 95, 11, 51, 13, 83, 58, 74, 23, 83, 76, 21, 72, 0, 87, 25, 99, 40, 87, 32, 78, 47, 46, 71, 69, 82, 89, 23, 1, 63, 96, 85, 5, 91, 30, 90, 86, 67, 95, 8, 35, 89, 23, 49, 39, 71, 79, 66, 22, 101, 2, 16, 89, 61, 1, 6, 70, 38, 28, 54, 35, 64, 57, 8, 10, 25, 49, 11, 50, 13, 27, 27, 23, 81, 8, 14, 89, 60, 25, 88, 0, 2, 66, 10, 54, 49, 42, 45, 12, 34, 85, 36, 10, 74, 8, 79, 86, 49, 90, 57, 32, 18, 71, 17, 89, 57, 4, 13, 6, 41, 17, 3, 33, 77, 6, 39, 79, 30, 7, 8, 39, 104, 64, 0, 75, 89, 62, 104, 33, 38, 41, 22, 1, 24, 17, 64, 97, 55, 77, 101, 96, 46, 15, 35, 11, 42, 1, 75, 18, 95, 40, 6, 49, 75, 100, 101, 42, 39, 26, 86, 35, 42, 10, 51, 3, 40, 33, 51, 69, 51, 0, 101, 12, 31, 90, 72, 22, 104, 15, 80, 27, 100, 7, 98, 25, 52, 36, 37, 74, 26, 41, 27, 41, 22, 45, 103, 79, 22, 18, 106, 63, 52, 71, 62, 20, 64, 101, 100, 15, 11, 101, 18, 4, 42, 26, 89, 22, 66, 44, 18, 102, 61, 105, 42, 42, 35, 48, 22, 41, 95, 88, 39, 25, 33, 35, 72, 75, 41, 8, 54, 46, 71, 22, 49, 29, 52, 16, 63, 20, 94, 64, 62, 74, 41, 25, 52, 81, 48, 83, 46, 102, 35, 74, 40, 93, 94, 62, 89, 38, 97, 21, 62, 55, 32, 59, 55, 63, 51, 100, 52, 1, 24, 15, 44, 49, 21, 86, 36, 67, 35, 55, 20, 14, 52, 74, 62, 13, 58, 104, 74, 41, 60, 83, 79, 19, 16, 50, 3, 79, 41, 65, 5, 73, 97, 76, 68, 49, 19, 29, 57, 73, 20, 57, 30, 10, 4, 3, 20, 97, 103, 34, 34, 32, 6, 58, 12, 57, 61, 25, 30, 54, 36, 10, 67, 38, 46, 64, 3, 46, 35, 49, 95, 71, 12, 16, 34, 21, 27, 97, 78, 29, 59, 27, 43, 26, 62, 43, 24, 80, 57, 74, 35, 13, 76, 92, 85, 39, 16, 15, 68, 63, 34, 27, 56, 13, 3, 79, 35, 10, 98, 91, 21, 83, 27, 20, 81, 86, 44, 89, 1, 102, 60, 7, 16, 59, 15, 25, 79, 59, 38, 89, 91, 93, 32, 88, 4, 75, 100, 63, 84, 71, 24, 47, 18, 3, 10, 78, 36, 29, 78, 55, 50, 47 };
                        else if (i == 3)
                            indexes = new List<int>() { 61, 36, 65, 1, 36, 65, 64, 4, 65, 64, 17, 65, 39, 51, 36, 36, 51, 4, 37, 43, 45, 4, 35, 51, 1, 27, 4, 61, 15, 36, 45, 65, 64, 64, 27, 65, 27, 15, 17, 65, 47, 52, 49, 65, 51, 2, 65, 1, 20, 51, 4, 7, 45, 4, 28, 65, 64, 47, 51, 33, 36, 27, 43, 28, 62, 21, 1, 59, 36, 38, 19, 42, 64, 36, 35, 45, 13, 2, 65, 41, 1, 35, 65, 0, 11, 4, 43, 24, 57, 45, 2, 18, 12, 61, 28, 52, 45, 1, 27, 36, 16, 64, 61, 20, 64, 45, 23, 45, 17, 8, 52, 1, 1, 61, 64, 49, 8, 36, 36, 8, 3, 65, 36, 51, 65, 58, 37, 1, 29, 21, 18, 26, 51, 36, 36, 24, 27, 51, 29, 52, 29, 23, 36, 6, 39, 25, 7, 42, 4, 1, 59, 36, 14, 65, 41, 20, 65, 6, 51, 42, 61, 51, 1, 51, 64, 31, 44, 52, 53, 13, 4, 7, 23, 35, 1, 35, 65, 4, 65, 59, 20, 34, 65, 53, 14, 36, 51, 15, 22, 15, 8, 64, 64, 36, 19, 9, 21, 47, 47, 47, 36, 49, 34, 17, 17, 9, 26, 40, 35, 56, 18, 23, 31, 45, 37, 8, 28, 59, 65, 18, 51, 39, 51, 1, 51, 45, 36, 64, 34, 36, 64, 17, 3, 64, 65, 55, 18, 23, 59, 45, 61, 1, 47, 12, 3, 19, 4, 27, 47, 36, 3, 12, 26, 14, 6, 10, 5, 61, 44, 61, 25, 23, 34, 14, 6, 64, 38, 64, 60, 28, 47, 44, 18, 45, 6, 34, 32, 64, 54, 32, 47, 65, 23, 19, 64, 20, 13, 12, 26, 33, 4, 38, 35, 2, 37, 3, 7, 33, 26, 12, 35, 36, 51, 23, 60, 3, 46, 1, 24, 47, 64, 21, 53, 46, 63, 5, 44, 8, 45, 38, 6, 0, 8, 50, 23, 59, 14, 15, 44, 52, 14, 15, 46, 2, 7, 15, 27, 3, 55, 6, 15, 37, 40, 2, 19, 3, 46, 43, 30, 4, 61, 14, 45, 48, 49, 47, 13, 59, 2, 44, 23, 38, 31, 27, 58, 7, 51, 28, 27, 16, 61, 63, 22, 45, 7, 59, 29, 3, 58, 13, 4, 36, 52, 18, 49, 43, 4, 64, 9, 28, 36, 36, 34, 20, 57, 48, 65, 39, 28, 12, 21, 28, 1, 12, 1, 24, 45, 35, 9, 26, 4, 6, 13, 23, 18, 39, 8, 4, 65, 54, 31, 49, 33, 38, 52, 62, 2, 34, 64, 35, 34, 13, 6, 28, 26, 28, 54, 18, 7, 64, 19, 51, 8, 49, 52, 34, 2, 61, 44, 29, 5, 15, 26, 47, 18, 8, 15, 49, 59, 52, 7, 29, 5, 29, 8, 64, 11, 14, 65, 25, 2 };
                    }

                    amountOfColors += Ki;
                    List<double[]> finalColor = new List<double[]>(); // #colorFinal
                    for (int j = 0; j < Ki; j++)
                        finalColor.Add(new double[3] {0, 0, 0} );
                    int[] nels = new int[Ki];
                    for (int j = 0; j < Ncl; j++)
                    {
                        for (int k = 0; k < colArray[j].Length; k++)
                            finalColor[indexes[j]][k] += colArray[j][k];
                        nels[indexes[j]]++;
                    }
                    // #ok

                    // %averaging proportions in each cluster

                    // %averaging colors in each cluster
                    for (int c = 0; c < Ki; c++)
                        for (int j = 0; j < finalColor[c].Length; j++)
                            finalColor[c][j] /= (nels[c] * 255);
                    // %transform proportions into colors
                    List<double[]> hsvColors = new List<double[]>();
                    for (int c = 0; c < finalColor.Count; c++)
                        hsvColors.Add(Functions.rgb2hsv(finalColor[c])); 
                    List<double[]> propsFinal = new List<double[]>();
                    List<ColorMixType> mixType = new List<ColorMixType>(); // #mixtyps
                    //double[] skip;
                    List<double[]> colorsFinali = new List<double[]>();
                    List<double[]> mixValuesi = new List<double[]>(); // #mixvaluesi

                    List<double[]> hsvNewColor;
                    Functions.PredictProportions(out propsFinal, out mixType, out hsvNewColor, hsvColors, Ycell, Wcell);
                    colorsFinali = Functions.hsv2rgb(Functions.prop2hsv(propsFinal, mixType, Wcell, Ycell));
                    colorMixTypes.AddRange(mixType);
                    for (int c = 0; c < colorsFinali.Count; c++)
                    {
                        for (int k = 0; k < colorsFinali[c].Length; k++)
                            colorsFinali[c][k] = Math.Round(colorsFinali[c][k] * 255);
                    }
                    //for (int c = 0; c < hsvColors.Count; c++)
                    //{
                    //    //double[] currentProps;
                    //    //ColorMixType currentMixType;
                    //    //Functions.PredictProportions(out currentProps, out currentMixType, out skip, hsvColors[c], Ycell, Wcell); // ##ok
                    //    //propsFinal.Add(currentProps);
                    //    //mixType.Add(currentMixType);
                    //    double[] colFinali = Functions.hsv2rgb(Functions.prop2hsv(propsFinal[c], mixType[c], Wcell, Ycell));
                    //    for (int k = 0; k < colFinali.Length; k++)
                    //        colFinali[k] = Math.Round(colFinali[k] * 255);
                    //    colorsFinali.Add(colFinali);
                    //    colorMixTypes.Add(mixType[c]);
                    //}

                    for (int c = 0; c < Math.Max(indexes.Count, propsFinal.Count); c++)
                    {
                        if (c < indexes.Count)
                            globalIndexes.Add(indexes[c] + clustersCounter); // % global indices
                        if (c < propsFinal.Count)
                            mixValuesi.Add(Functions.proportions2pp(propsFinal[c], (ColorMixType)i));
                    }
                    // ##ok

                    mix8colorsValues.AddRange(mixValuesi); //% 8 colors
                    finalColors.AddRange(colorsFinali); //% final colors
                    proportionValues.AddRange(propsFinal); // % proportions of the mixtures

                    clustersCounter += (int)Ki;
                }
            }
            nColors = amountOfColors;
            // %re-order ids
            List<int> reorderedIdexes = new List<int>(); // #idsnew
            reorderedIdexes.AddRange(globalIndexes);
            for (int i = 0; i < nStrokes; i++)
                reorderedIdexes[indexesToIndexes[i]] = globalIndexes[i];
            globalIndexes.Clear();
            globalIndexes.AddRange(reorderedIdexes);
            // ##ok

            //% create mix groups

            List<List<int>> listsByMixGroups = new List<List<int>>(amountOfMixGroups); // #iclscell
            for (int j = 0; j < amountOfMixGroups; j++)
                listsByMixGroups.Add(new List<int>());

            for (int j = 0; j < nColors; j++)
                listsByMixGroups[(int)colorMixTypes[j]].Add(j); // append new value of color mix to list of colorMixTypes[j]

            List<int> icls = new List<int>(); // %indices of values sorted by class
            // ## ok
            for (int j = 0; j < amountOfMixGroups; j++)
                icls.AddRange(listsByMixGroups[j]);

            // %sort by amount of white color - 5th row - in the overall mix
            // ##ok
            List<int> irow = new List<int>();
            List<double[]> mxall = new List<double[]>();
            int ctr = 0;
            for (int j = 0; j < amountOfMixGroups; j++)
            {
                if (listsByMixGroups[j].Count > 0)
                {
                    List<double> listToSort = new List<double>();
                    List<double[]> mxarray = new List<double[]>();
                    for (int index = 0; index < listsByMixGroups[j].Count; index++)
                    {
                        mxarray.Add(mix8colorsValues[(int)listsByMixGroups[j][index]]);
                        listToSort.Add(mix8colorsValues[(int)listsByMixGroups[j][index]][4]);
                    }
                    mxall.AddRange(mxarray);
                    // надо взять 4 столбец и его сортануть: (int)listsByMixGroups[все][4]
                    var sorted = listToSort // %iarray is array of indices how strokes are actually organized
                        .Select((elem, index) => new KeyValuePair<double, int>(elem, index)) // key = element, value = it's index
                        .OrderBy(elem => elem.Key)
                        .ToList();
                    List<int> iarray = sorted
                        .Select(pair => pair.Value)
                        .ToList();
                    foreach (int index in iarray)
                        irow.Add(icls[ctr + index]); // %irow is a sorting order of clusters

                    ctr += iarray.Count;
                }
            }

            // % then, obrain correct order of strokes by ind
            int[] ind = new int[nStrokes];
            ctr = 0; 
            for (int i = 0; i < nColors; i++)
            {
                int i_corr = irow[i];
                for (int j = 0; j < nStrokes; j++)
                {
                    if (globalIndexes[j] == i_corr)
                    {
                        ind[ctr] = j;
                        ctr++;
                    }
                }
            }

            int[,] strokes2 = new int[nColors, nStrokes];
            int[] strCount = new int[nColors];
            // map2 is unused wtf
            
            for (int i = 0; i < nStrokes; i++)
            {
                int i_cluster = globalIndexes[ind[i]];
                int i_sorted = ind[i];
                strokes[i_sorted].color = finalColors[i_cluster];
                strokes[i_sorted].col8paints = mix8colorsValues[i_cluster];
                strokes[i_sorted].proportions = proportionValues[i_cluster];

                strCount[i_cluster]++;
                strokes2[i_cluster, strCount[i_cluster] - 1] = i_sorted;
            }

            // %sort strokes by position in each cluster, to reduce the machine tool path
            int[,] strokes3 = strokes2.Clone() as int[,];
            Matrix2D str3 = new Matrix2D(matrix2: strokes3);
            for (int i = 0; i < nColors; i++) // % for each cluster
            {
                int curStrokeId = strokes2[i, 0]; // %index in strokes
                strokes2[i, 0] = 0; // %0, because the i-th stroke is already taken
                int j = 1;
                while (j + 1 < strCount[i]) // %for the strokes in a cluster
                {
                    // looking for pair to curStroke
                    Stroke curStroke = strokes[curStrokeId];
                    Point curPoint = curStroke.points.Last(); // #curX #curY
                    double distMin = double.MaxValue;
                    int nextStrokeId = curStrokeId;
                    int k = 0;
                    int nextNumber = 0;
                    while (k + 1 < strCount[i])
                    {
                        if (strokes2[i, k] != 0)
                        {
                            Stroke candidate = strokes[strokes2[i, k]];
                            double dist = Math.Sqrt(
                                (curPoint.X - candidate.points[0].X) * 
                                (curPoint.X - candidate.points[0].X) + 
                                (curPoint.Y - candidate.points[0].Y) * 
                                (curPoint.Y - candidate.points[0].Y));
                            if (dist < distMin)
                            {
                                distMin = dist;
                                nextStrokeId = strokes2[i, k];
                                nextNumber = k;
                            }
                        }
                        k++;
                    }
                    strokes3[i, j] = nextStrokeId;
                    curStrokeId = nextStrokeId;
                    strokes2[i, nextNumber] = 0; // %processed
                    j++;
                }
            }

            // %put them into the array again
            List<Stroke> map = new List<Stroke>(nStrokes);
            for (int i = 0; i < nColors; i++)
            {
                int iCol = irow[i]; // %correct order of clusters
                for (int j = 0; j < strCount[iCol]; j++)
                    map.Add(strokes[strokes3[iCol, j]]);
            }
            // now in map we have the right ordered strokes we want to paint 
            //imshow(map2imgColorCanvas(brushSize, canvas, map, canvasColor));
            Matrix3D finalImage = Functions.strokesToImage(strokeBrush.thickness, ColoredCanvas, map, settings.canvasColor);
            
            string filename = @"C:\Users\varka\Documents\RobotArtist extra\commands.txt";
            Functions.SavePLT_8paints(map, InitialImage[0].Columns, InitialImage[0].Rows, settings.guiTrace.canvasWidthMM, settings.guiTrace.canvasHeightMM, settings.guiTrace.brushWidthMM, filename);
            
            return ConvertAlgStrokesToPLTStrokes(map);
        }

        private PLTDecoderRes ConvertAlgStrokesToPLTStrokes(List<Stroke> map) {
            List<GeneralComponents.PLT.Stroke> PLTlist = 
                new List<GeneralComponents.PLT.Stroke>();
            IColor icolor = new RGBColor(0, 0, 0);
            if (settings.useColor8Paints)
                icolor = new CMYBWColor(new string[] { "bla" });
            foreach(var stroke in map)
                PLTlist.AddRange(stroke.ConvertToPLTStroke(
                    icolor, settings.guiTrace.brushWidthMM));
            return new PLTDecoderRes(PLTlist);
        }
    }
}
